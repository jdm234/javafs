Mysql 접속
mysql -u root -p      로그인

mysql> quit   
mysql> exit   -로그아웃  

빠져나갈때 -  "";

Database
show  databases;    데이터 목록표시
CREATE DATABASE [DB명]; 데이터베이스 생성
DROP DATABASE [삭제할 DB명]; 데이터베이스 삭제
USE [선택할 DB명]; 데이터베이스에 접근(선택)

1. 테이블 생성
CREATE TABLE [table명] (
  [column1] [datatype] [option],
  [column2] [datatype] [option],
  [column3] [datatype] [option],
  ...
  PRIMARY KEY ([PK로 지정할 column명]),
  FOREIGN KEY ([FK로 지정할 column명]) REFERENCES [참조할 table명] ([참조할 PK명])
);
CREATE TABLE drinks (
  id INT NOT NULL AUTO_INCREMENT,
  name VARCHAR(45) NOT NULL,
  image_url VARCHAR(2000) NOT NULL,
  description VARCHAR(500) NOT NULL,
  is_new TINYINT,
  category_id INT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (category_id) REFERENCES categories (id)
);

2. 데이터 베이스 테이블의 구조
데이터 베이스 테이블의 구조 보기
desc 테이블명
desc mem

3.1 필드 삭제하기
alter table mem drop post_num; 

3.2 필드 수정 

alter table mem change age phone char(20);

3.3 필드 데이터형 수정하기

alter table mem modify phone int;

4. 데이터베이스 테이블 이름 관리
이름 존재하는 DB테이블 이름을 변경하는 명령

alter table 수정할_테이블명 rename 새로운 테이블명;

5. 데이터 베이스 테이블 삭제
drop table 테이블
mem2 테이블을 삭제하는 명령.

전체 필드와 데이터 검색

다음은 DB 테이블의 전체 필드와 데이터를 보여주는 명령 형식.s
select * from 테이블명;

select * from member;

- 특정 필드의 전체 레코드 검색

delect 필드명1, 필드명2, 필드명3...from 테이블명

member 테이블의 전체 레코드에서 name, tel, address 필드 데이터만 검색하는 명령.

select name, tel, address from member;

여성 회원의 아이디, 이름, 주소, 성멸 검색

select id, name, address, gender from member where gender = "w";

문제1) 50세 이상인 남성 회원의 이름, 전화번호, 성별, 나이검색
select name, tel, gender, age from member where age >= 50 and gender = "M";

문제2) 20대 회원의 이름, 성별, 주소, 나이검색
select name, gender, address, age from member where age >= 20 and age <= 29;

문제3) 30대 또는 50대 남성회원의 이름, 전화번호, 나이, 성별 검색
select name, tel, age, gender from member where(( age >= 30 and age <= 39) or (age >= 50 and age <= 59)) and gender='M';

[예제 10-5] 이름이 '안철영'인 회원의 일련번호, 이름, 전화번호, 주소, 우편번호, 나이, 성별, 선택
 select numnum, name, tel, address, post_num, age, gender from member where name ='안철영';

특정문자열이 포함된 레코드 검색
테이블명' 이라는 DB 테이블에서 '검색필드'에 포함된 '문자열_수식' 조건을 만족하는 레코드의 필드명1,
필드명2, ...를 검색하는 명령형식.

select 필드명1, 필드명2, ...from 테이블명 where 검색필드 like 물자열_수식
- 성이 박씨인 회원의 이름, 전화번호 검색
- select name, tel from member where name like '박%';

- 서울에 거주하는 회원의 일련번호, 이름, 주소, 성별 검색
select numnum, name, tel, address, gender from member where address like '서울%';

- 은평구에 거주하는 회원의 모든정보 검색
select * from member where address like '은평구%';

데이터의 검색과 관리
- 서울에 사는 회원을 나이순으로 오름차순 정렬한 뒤 이름, 나이, 주소, 전화번호, 성별 출력
select name, age, address, tel, gender from member where address like '서울%' order by age;

- 부산에 사는 회원을 나이순으로 내림차순 정렬한 뒤 이름, 나이, 주소, 전화번호 출력
- select name, age, address, tel from member where address like '부산%' order by age desc; 

레코드의 수정
-  '테이블명'이라는 DB 테이블에서 조건식을 만족하는 레코드의 '필드명' 값을 '필드값'으로 변경하는 명령형식
 update 테이블명 set  필드명 = 필드값 where 조건식;
- 이름이 '고재진'인 레코드의 전화번호를 123-4567로 변경한 뒤 데이터 확인
update member set tel='123-4567' where name='고재진';
- select name, tel from member where name="고재진";

- 이름이 '정한나'인 회원의 나이를 확인 하고 값을 37로 변경
select name, age from member where name='정한나';
update member set age=37 where name='정한나';
select name, age from member where name='정한나';

레코드 삭제
'테이블명' 이라는 DB테이블에서 조건식을 만족하는 레코드를 삭제하는 명령형식.
delete from 테이블명 where 조건식;

40대 회원의 레코드를 삭제한 뒤 35~53세 회원의 이름, 나이, 성별을 나이순으로 출력하여 확인
delete from member where age>=40 and age<=49;
select name, age, gender from member where age>=35 and age<=53 order by age;

member 테이블의 전체 레코드를 삭제하는 명령 형식
delete from member

조건식을 생략한 채 delete from 명령을 실행하면 member 테이블의 전체 레코드를 삭제할 수 있음.

INSERT INTO song (_id, title, lyrics) VALUES (101, 'Tell Me', 'tell me tell me tetetete tel me');
INSERT INTO song (title, lyrics) VALUES ('Gee', 'GEE GEE GEE GEE GEE BABY BABY');
INSERT INTO song (title, lyrics) VALUES ('미스터', '이름이 뭐야 미스터');
INSERT INTO song (title, lyrics) VALUES ('Abracadabra', '이러다 미쳐 내가 여리여리');
INSERT INTO song (title, lyrics) VALUES ('8282', 'Give me a call Baby baby');
INSERT INTO song (title, lyrics) VALUES ('기대해', '기대해');
INSERT INTO song (title, lyrics) VALUES ('I Don\'t car', '다른 여자들의 다리를');
INSERT INTO song (title, lyrics) VALUES ('Bad Girl Good Girl', '앞에선 한 마디 말도');
INSERT INTO song (title, lyrics) VALUES ('피노키오', '뉴예삐오');
INSERT INTO song (title, lyrics) VALUES ('별빛달빛', '너는 내 별빛 내 마음의 별빛');
INSERT INTO song (title, lyrics) VALUES ('A', 'A 워오우 워오우워 우우우');
INSERT INTO song (title, lyrics) VALUES ('나혼자', '나 혼자 밥을 먹고 나 혼자 영화 보고');
INSERT INTO song (title, lyrics) VALUES ('LUV', '설레이나요 ');
INSERT INTO song (title, lyrics) VALUES ('짧은치마', '짧은 치마를 입고 내가 길을 걸으면');
INSERT INTO song (title, lyrics) VALUES ('위아래', '위 아래 위위 아래');
INSERT INTO song (title, lyrics) VALUES ('Dumb Dumb' , '너 땜에 하루종일');


INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('원더걸스', '2007-09-12', 101);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('소녀시대', '2009-06-03', 102);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('카라', '2009-07-30', 103);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('브라운아이드걸스', '2008-01-17', 104);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('다비치', '2009-02-27', 105);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('2NE1', '2009-07-08', 107);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('f(x)', '2011-04-20', 109);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('시크릿', '2011-01-06', 110);
INSERT INTO girl_group (name, debut, hit_song_id) 
VALUES ('레인보우', '2010-08-12', 111);
INSERT INTO girl_group (name, debut) 
VALUES ('에프터 스쿨', '2009-11-25');
INSERT INTO girl_group (name, debut) 
VALUES ('포미닛', '2009-08-28');

CREATE TABLE users (
 id INT PRIMARY KEY,
 name VARCHAR(50),
 email VARCHAR(100)
);

CREATE TABLE orders (
 id INT PRIMARY KEY,
 user_id INT,
 product VARCHAR(50),
 PRICE DECIMAL(10,2),
 foreign key (user_id) REFERENCES users(id)
);

-- uers 테이블 데이터
INSERT INTO users (id, name, email) VALUES
(1, 'John smith', 'john@example.com'),
(2, 'Jane Doe', 'jane@example.com');

-- orders 테이블 데이터
INSERT INTO orders (id, user_id, product, price) VALUES
(1, 1, 'product A', 10.99),
(2, 1, 'product B', 19.99),
(3, 2, 'product C', 5.99);

u.name 과 o.product, o.price를 inner join해서 보여주시오